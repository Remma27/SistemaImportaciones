
name: Build and deploy ASP.Net Core app to Azure Web App - Importaciones2

on:
    push:
        branches:
            - main
    pull_request:
        branches:
            - main
    workflow_dispatch:

env:
    DOTNET_VERSION: '9.x'
    BUILD_CONFIGURATION: 'Release'

jobs:
    build:
        runs-on: windows-latest
        permissions:
            contents: read 

        steps:
            - uses: actions/checkout@v4

            - name: Set up .NET Core
              uses: actions/setup-dotnet@v4
              with:
                  dotnet-version: ${{ env.DOTNET_VERSION }}

            - name: Restore NuGet packages cache
              uses: actions/cache@v3
              with:
                  path: ~/.nuget/packages
                  key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
                  restore-keys: |
                      ${{ runner.os }}-nuget-

            - name: Restore dependencies
              run: dotnet restore

            - name: Build with dotnet
              run: dotnet build --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore

            - name: Run tests
              run: dotnet test --configuration ${{ env.BUILD_CONFIGURATION }} --no-build --verbosity normal

            - name: dotnet publish
              if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
              run: |
                dotnet publish -c ${{ env.BUILD_CONFIGURATION }} --no-build
                mkdir -p "${{env.DOTNET_ROOT}}/myapp"
                cp -r */bin/${{ env.BUILD_CONFIGURATION }}/**/publish/* "${{env.DOTNET_ROOT}}/myapp/"

            - name: Upload artifact for deployment job
              if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
              uses: actions/upload-artifact@v4
              with:
                  name: .net-app
                  path: ${{env.DOTNET_ROOT}}/myapp
                  retention-days: 5

    deploy:
        runs-on: windows-latest
        needs: build
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        environment:
            name: 'Production'
            url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

        steps:
            - name: Download artifact from build job
              uses: actions/download-artifact@v4
              with:
                  name: .net-app

            - name: Deploy to Azure Web App
              id: deploy-to-webapp
              uses: azure/webapps-deploy@v3
              with:
                  app-name: 'Importaciones2'
                  slot-name: 'Production'
                  package: .
                  publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_4A79BCE99CFA40E096917F025D6C7C73 }}
            
            - name: Post-deployment health check
              run: |
                  Write-Host "Waiting for 30 seconds to allow the application to start..."
                  Start-Sleep -Seconds 30
                  
                  $maxRetries = 5
                  $retryCount = 0
                  $success = $false
                  
                  while ($retryCount -lt $maxRetries -and -not $success) {
                      try {
                          Write-Host "Attempt $($retryCount + 1) to check application health..."
                          $response = Invoke-WebRequest -Uri "${{ steps.deploy-to-webapp.outputs.webapp-url }}" -UseBasicParsing -TimeoutSec 30
                          $statusCode = $response.StatusCode
                          
                          if ($statusCode -eq 200) {
                              Write-Host "Application is healthy with status code: $statusCode"
                              $success = $true
                          } else {
                              Write-Host "Application returned status code: $statusCode"
                              $retryCount++
                              Start-Sleep -Seconds 15
                          }
                      } catch {
                          Write-Host "Error checking application health: $_"
                          $retryCount++
                          Start-Sleep -Seconds 15
                      }
                  }
                  
                  if (-not $success) {
                      Write-Error "Application health check failed after $maxRetries attempts."
                      exit 1
                  }
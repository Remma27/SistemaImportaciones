@model Sistema_de_Gestion_de_Importaciones.ViewModels.ReporteEscotillasPorEmpresaViewModel

@{
    ViewData["Title"] = "Reporte General por Escotillas";
    ViewData["FullWidth"] = true;
    var selectedBarco = Context.Request.Query["selectedBarco"].ToString();
    var returnController = Context.Request.Query["returnController"].ToString();
    var backController = !string.IsNullOrEmpty(returnController) ? returnController : "RegistroPesajes";
    var todasLasEscotillas = new int[] { 1, 2, 3, 4, 5, 6, 7 };
    var unidades = new[] { "Kilogramos", "Quintales", "Libras", "Toneladas" };
    
    // Pre-calcular los totales por escotilla para cada unidad de medida
    var totalesKgPorEscotilla = new Dictionary<int, decimal>();
    var totalesQQPorEscotilla = new Dictionary<int, decimal>();
    var totalesLbPorEscotilla = new Dictionary<int, decimal>();
    var totalesTonPorEscotilla = new Dictionary<int, decimal>();
    
    foreach (var numeroEscotilla in todasLasEscotillas)
    {
        totalesKgPorEscotilla[numeroEscotilla] = Model.Empresas
            .SelectMany(e => e.Escotillas.Where(esc => esc.NumeroEscotilla == numeroEscotilla))
            .Sum(e => e.DescargaKg);
            
        totalesQQPorEscotilla[numeroEscotilla] = Model.Empresas
            .SelectMany(e => e.Escotillas.Where(esc => esc.NumeroEscotilla == numeroEscotilla))
            .Sum(e => e.DescargaQuintales);
            
        totalesLbPorEscotilla[numeroEscotilla] = Model.Empresas
            .SelectMany(e => e.Escotillas.Where(esc => esc.NumeroEscotilla == numeroEscotilla))
            .Sum(e => e.DescargaLb);
            
        totalesTonPorEscotilla[numeroEscotilla] = Model.Empresas
            .SelectMany(e => e.Escotillas.Where(esc => esc.NumeroEscotilla == numeroEscotilla))
            .Sum(e => e.DescargaTon);
    }
    
    // Calcular el gran total para cada unidad
    var totalKg = Model.Empresas.SelectMany(e => e.Escotillas).Sum(e => e.DescargaKg);
    var totalQQ = Model.Empresas.SelectMany(e => e.Escotillas).Sum(e => e.DescargaQuintales);
    var totalLb = Model.Empresas.SelectMany(e => e.Escotillas).Sum(e => e.DescargaLb);
    var totalTon = Model.Empresas.SelectMany(e => e.Escotillas).Sum(e => e.DescargaTon);
}

<div class="container-fluid px-4">    
    <div class="card shadow">
        <div class="card-header bg-gradient bg-primary py-3">
            <div class="row align-items-center">
                <div class="col-12">
                    <h3 class="mb-0 text-white"><i class="fas fa-chart-bar me-2"></i>Reporte de Escotillas por Empresa</h3>
                </div>
            </div>
        </div>
        
        <div class="card-body px-2">
            @if (TempData["Error"] != null)
            {
                <div class="alert alert-danger">
                    <i class="fas fa-exclamation-triangle me-2"></i> @TempData["Error"]
                </div>
            }
            
            @if (string.IsNullOrEmpty(selectedBarco))
            {
                <div class="alert alert-info">
                    <i class="fas fa-info-circle me-2"></i> Por favor seleccione un barco para ver el reporte.
                </div>
            }
            else if (!Model.Empresas.Any())
            {
                <div class="alert alert-warning">
                    <i class="fas fa-exclamation-circle me-2"></i> No hay datos disponibles para el barco seleccionado.
                </div>
            }
            else
            {
                <div class="mb-4">
                    <div class="row align-items-center">
                        <!-- Título del barco - Apila en móviles, alinea al inicio en desktop -->
                        <div class="col-12 col-md-6 mb-2 mb-md-0">
                            <h4 class="text-primary mb-0">
                                <i class="fas fa-ship me-2"></i>Barco: @ViewBag.BarcoSeleccionado
                            </h4>
                        </div>
                        
                        <!-- Botones mejorados para responsividad -->
                        <div class="col-12 col-md-6">
                            <div class="d-flex flex-wrap justify-content-start justify-content-md-end gap-2">
                                <button id="toggleUnits" class="btn btn-info px-3 py-2">
                                    <i class="fas fa-eye me-1"></i>
                                    <span>Mostrar Todas las Unidades</span>
                                </button>
                                
                                <a href="@Url.Action("Index", backController, new { selectedBarco = Context.Request.Query["selectedBarco"] })" 
                                   class="btn btn-secondary px-3 py-2">
                                    <i class="fas fa-arrow-left me-1"></i>
                                    <span>Volver</span>
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Modified table container with wider layout and fixed footer -->
                <div class="table-responsive table-container" style="max-height: 600px; overflow-y: auto;">
                    <table id="tablaReporte" class="table table-striped table-bordered table-hover w-100">
                        <thead class="table-primary sticky-top">
                            <tr>
                                <th rowspan="2" class="align-middle" style="position: sticky; top: 0; z-index: 10; background-color: #cfe2ff;">Empresa</th>
                                <th rowspan="2" class="align-middle" style="position: sticky; top: 0; z-index: 10; background-color: #cfe2ff;">Unidad</th>
                                <th colspan="7" class="text-center" style="position: sticky; top: 0; z-index: 10; background-color: #cfe2ff;">Escotillas</th>
                                <th rowspan="2" class="align-middle text-center" style="position: sticky; top: 0; z-index: 10; background-color: #cfe2ff;">Subtotal</th>
                            </tr>
                            <tr>
                                @foreach (var escotilla in todasLasEscotillas)
                                {
                                    <th class="text-center" style="position: sticky; top: 42px; z-index: 10; background-color: #cfe2ff;">@escotilla</th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var empresa in Model.Empresas)
                            {
                                <!-- Primera fila para Kilogramos -->
                                <tr class="unidad-row kg-row">
                                    <td rowspan="4" class="align-middle fw-bold">@empresa.NombreEmpresa</td>
                                    <td>Kilogramos</td>
                                    @foreach (var numeroEscotilla in todasLasEscotillas)
                                    {
                                        var escotilla = empresa.Escotillas.FirstOrDefault(e => e.NumeroEscotilla == numeroEscotilla);
                                        <td class="text-end">@(escotilla?.DescargaKg.ToString("N2") ?? "0.00")</td>
                                    }
                                    <td class="text-end fw-bold">@empresa.Escotillas.Sum(e => e.DescargaKg).ToString("N2")</td>
                                </tr>
                                
                                <!-- Fila para Quintales -->
                                <tr class="unidad-row qq-row">
                                    <td>Quintales</td>
                                    @foreach (var numeroEscotilla in todasLasEscotillas)
                                    {
                                        var escotilla = empresa.Escotillas.FirstOrDefault(e => e.NumeroEscotilla == numeroEscotilla);
                                        <td class="text-end">@(escotilla?.DescargaQuintales.ToString("N4") ?? "0.0000")</td>
                                    }
                                    <td class="text-end fw-bold">@empresa.Escotillas.Sum(e => e.DescargaQuintales).ToString("N4")</td>
                                </tr>
                                
                                <!-- Fila para Libras -->
                                <tr class="unidad-row lb-row">
                                    <td>Libras</td>
                                    @foreach (var numeroEscotilla in todasLasEscotillas)
                                    {
                                        var escotilla = empresa.Escotillas.FirstOrDefault(e => e.NumeroEscotilla == numeroEscotilla);
                                        <td class="text-end">@(escotilla?.DescargaLb.ToString("N0") ?? "0")</td>
                                    }
                                    <td class="text-end fw-bold">@empresa.Escotillas.Sum(e => e.DescargaLb).ToString("N0")</td>
                                </tr>
                                
                                <!-- Fila para Toneladas -->
                                <tr class="unidad-row ton-row">
                                    <td>Toneladas</td>
                                    @foreach (var numeroEscotilla in todasLasEscotillas)
                                    {
                                        var escotilla = empresa.Escotillas.FirstOrDefault(e => e.NumeroEscotilla == numeroEscotilla);
                                        <td class="text-end">@(escotilla?.DescargaTon.ToString("N4") ?? "0.0000")</td>
                                    }
                                    <td class="text-end fw-bold">@empresa.Escotillas.Sum(e => e.DescargaTon).ToString("N4")</td>
                                </tr>
                            }
                        </tbody>
                        <tfoot class="table-primary sticky-bottom">
                            <!-- Totales por Kilogramos -->
                            <tr class="unidad-row kg-row">
                                <td colspan="2" class="text-end fw-bold" style="position: sticky; bottom: auto; z-index: 10; background-color: #cfe2ff;">TOTAL Kilogramos:</td>
                                @foreach (var numeroEscotilla in todasLasEscotillas)
                                {
                                    <td class="text-end fw-bold" style="position: sticky; bottom: auto; z-index: 10; background-color: #cfe2ff;">
                                        @totalesKgPorEscotilla[numeroEscotilla].ToString("N2")
                                    </td>
                                }
                                <td class="text-end fw-bold" style="position: sticky; bottom: auto; z-index: 10; background-color: #cfe2ff;">
                                    @totalKg.ToString("N2")
                                </td>
                            </tr>
                            
                            <!-- Totales por Quintales -->
                            <tr class="unidad-row qq-row">
                                <td colspan="2" class="text-end fw-bold" style="position: sticky; bottom: auto; z-index: 10; background-color: #cfe2ff;">TOTAL Quintales:</td>
                                @foreach (var numeroEscotilla in todasLasEscotillas)
                                {
                                    <td class="text-end fw-bold" style="position: sticky; bottom: auto; z-index: 10; background-color: #cfe2ff;">
                                        @totalesQQPorEscotilla[numeroEscotilla].ToString("N4")
                                    </td>
                                }
                                <td class="text-end fw-bold" style="position: sticky; bottom: auto; z-index: 10; background-color: #cfe2ff;">
                                    @totalQQ.ToString("N4")
                                </td>
                            </tr>
                            
                            <!-- Totales por Libras -->
                            <tr class="unidad-row lb-row">
                                <td colspan="2" class="text-end fw-bold" style="position: sticky; bottom: auto; z-index: 10; background-color: #cfe2ff;">TOTAL Libras:</td>
                                @foreach (var numeroEscotilla in todasLasEscotillas)
                                {
                                    <td class="text-end fw-bold" style="position: sticky; bottom: auto; z-index: 10; background-color: #cfe2ff;">
                                        @totalesLbPorEscotilla[numeroEscotilla].ToString("N0")
                                    </td>
                                }
                                <td class="text-end fw-bold" style="position: sticky; bottom: auto; z-index: 10; background-color: #cfe2ff;">
                                    @totalLb.ToString("N0")
                                </td>
                            </tr>
                            
                            <!-- Totales por Toneladas -->
                            <tr class="unidad-row ton-row">
                                <td colspan="2" class="text-end fw-bold" style="position: sticky; bottom: auto; z-index: 10; background-color: #cfe2ff;">TOTAL Toneladas:</td>
                                @foreach (var numeroEscotilla in todasLasEscotillas)
                                {
                                    <td class="text-end fw-bold" style="position: sticky; bottom: auto; z-index: 10; background-color: #cfe2ff;">
                                        @totalesTonPorEscotilla[numeroEscotilla].ToString("N4")
                                    </td>
                                }
                                <td class="text-end fw-bold" style="position: sticky; bottom: auto; z-index: 10; background-color: #cfe2ff;">
                                    @totalTon.ToString("N4")
                                </td>
                            </tr>
                        </tfoot>
                    </table>
                </div>
            }
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Existing toggle units code
        const qqRows = document.querySelectorAll('.qq-row');
        const lbRows = document.querySelectorAll('.lb-row');
        let unitsVisible = false;
        
        // Hide rows on page load
        qqRows.forEach(row => row.style.display = 'none');
        lbRows.forEach(row => row.style.display = 'none');
        
        // Set up toggle button
        const toggleButton = document.getElementById('toggleUnits');
        toggleButton.addEventListener('click', function() {
            unitsVisible = !unitsVisible;
            
            if (unitsVisible) {
                // Show all unit rows
                qqRows.forEach(row => row.style.display = '');
                lbRows.forEach(row => row.style.display = '');
                toggleButton.innerHTML = '<i class="fas fa-eye-slash me-1"></i>Mostrar Unidades Básicas';
                toggleButton.classList.replace('btn-info', 'btn-secondary');
            } else {
                // Hide Quintales and Libras
                qqRows.forEach(row => row.style.display = 'none');
                lbRows.forEach(row => row.style.display = 'none');
                toggleButton.innerHTML = '<i class="fas fa-eye me-1"></i>Mostrar Todas las Unidades';
                toggleButton.classList.replace('btn-secondary', 'btn-info');
            }
            
            // Fix rowspan for empresa cells when hiding rows
            fixRowspans(unitsVisible);
        });
        
        // Initially fix rowspans
        fixRowspans(unitsVisible);
        
        // Function to adjust rowspan for empresa cells
        function fixRowspans(showingAllUnits) {
            const empresaCells = document.querySelectorAll('td.fw-bold.align-middle');
            empresaCells.forEach(cell => {
                cell.rowSpan = showingAllUnits ? 4 : 2;
            });
        }

        // Adjust table header width to match body columns
        function adjustHeaderWidths() {
            // Get all table body rows
            const bodyRows = document.querySelectorAll('#tablaReporte tbody tr:first-child td');
            const headerCells = document.querySelectorAll('#tablaReporte thead tr:last-child th');
            
            // Skip if no data or mismatch in columns
            if (bodyRows.length === 0 || headerCells.length !== bodyRows.length - 1) return;
            
            // Apply widths from body to header
            for (let i = 0; i < headerCells.length; i++) {
                if (bodyRows[i+1]) {
                    const width = bodyRows[i+1].offsetWidth;
                    headerCells[i].style.minWidth = width + 'px';
                }
            }
        }
        
        // Run once on page load
        setTimeout(adjustHeaderWidths, 100);
        
        // Also adjust on window resize
        window.addEventListener('resize', adjustHeaderWidths);
    });
</script>

<style>
    /* Make the table use more horizontal space */
    .container-fluid {
        max-width: 100%;
        padding-left: 1rem;
        padding-right: 1rem;
    }
    
    /* Make the table take up full available width */
    .table-responsive {
        border: 1px solid #dee2e6;
        border-radius: 0.25rem;
    }
    
    /* Ensure all cells have appropriate padding */
    #tablaReporte td, #tablaReporte th {
        padding: 0.5rem;
    }
    
    /* Fixed header styling */
    #tablaReporte thead.sticky-top {
        position: sticky;
        top: 0;
        z-index: 5;
    }
    
    /* Fixed footer styling */
    #tablaReporte tfoot.sticky-bottom {
        position: sticky;
        bottom: 0;
        z-index: 4; /* Lower than header but still above body */
    }
    
    /* Add borders to headers and footers for better separation */
    #tablaReporte thead th {
        box-shadow: 0 1px 0 #dee2e6, 0 -1px 0 #dee2e6;
        background-clip: padding-box;
    }
    
    #tablaReporte tfoot td {
        box-shadow: 0 -1px 0 #dee2e6;
        background-clip: padding-box;
    }
    
    /* Ensure proper column sizing and prevent wrapping */
    #tablaReporte th, #tablaReporte td {
        white-space: nowrap;
    }
    
    /* Add some min widths to ensure columns aren't too narrow */
    #tablaReporte th:first-child {
        min-width: 150px;
    }
    
    #tablaReporte th:nth-child(2) {
        min-width: 100px;
    }
    
    /* Escotilla columns should have consistent width */
    #tablaReporte thead tr:last-child th {
        min-width: 80px;
    }
    
    /* Highlight rows on hover */
    #tablaReporte tbody tr:hover {
        background-color: rgba(0,123,255,0.05) !important;
    }
    
    /* Box shadow for scroll indication at bottom */
    .table-container::after {
        content: '';
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        height: 10px;
        background: linear-gradient(to bottom, transparent, rgba(0,0,0,0.05));
        pointer-events: none;
    }
</style>

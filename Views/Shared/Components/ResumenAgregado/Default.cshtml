@model IEnumerable<Sistema_de_Gestion_de_Importaciones.ViewModels.RegistroPesajesAgregado>

<div class="col-lg-12">
    <div class="card mb-4 shadow">
        <div class="card-header bg-gradient bg-success text-white py-3 d-flex justify-content-between align-items-center">
            <h5 class="mb-0"><i class="fas fa-chart-pie me-2"></i>Resumen Agregado</h5>
            <button id="btnExportarExcelResumen" class="btn btn-light btn-sm" title="Exportar a Excel" 
                    @(Model == null || !Model.Any() ? "disabled" : "")>
                <i class="fas fa-file-excel me-1"></i>Exportar Excel
            </button>
        </div>
        <div class="card-body p-0">
            @if (Model == null || !Model.Any())
            {
                <div class="py-4 px-3">
                    <div class="alert alert-info text-center p-4 mb-0 mx-auto" style="max-width: 1200px;">
                        <i class="fas fa-info-circle fa-2x mb-3"></i>
                        <h5 class="alert-heading mb-2">No hay registros disponibles</h5>
                        <p class="mb-0">Seleccione una importaci√≥n para ver el resumen agregado.</p>
                    </div>
                </div>
            }
            else
            {
                <div class="table-scroll">
                    <table id="tabla2" class="table table-hover align-middle table-fixed-header mb-0">
                        <thead>
                            <tr>
                                <th class="bg-white text-black">Empresa</th>
                                <th class="bg-white text-black text-end column-md">Req. (Kg)</th>
                                <th class="bg-white text-black text-end column-sm">Req. (Ton)</th>
                                <th class="bg-white text-black text-end column-md">Desc. (Kg)</th>
                                <th class="text-end column-md unit-toggle-columns">
                                    <div>Desc.</div>
                                    <div><small>Qq / Lbs</small></div>
                                </th>
                                <th class="bg-white text-black text-end column-md">Falt. (Kg)</th>
                                <th class="bg-white text-black text-end column-sm">Falt. (Ton)</th>
                                <th class="text-end column-md unit-toggle-columns">
                                    <div>Falt.</div>
                                    <div><small>Qq / Lbs</small></div>
                                </th>
                                <th class="bg-white text-black text-end column-sm">Cam. Falt.</th>
                                <th class="bg-white text-black text-center column-sm">Placas</th>
                                <th class="bg-white text-black text-end column-sm">% Desc.</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model)
                            {
                                <tr>
                                    <td>@item.Agroindustria</td>
                                    <td class="text-end">@item.KilosRequeridos.ToString("N0")</td>
                                    <td class="text-end">@item.ToneladasRequeridas.ToString("N2")</td>
                                    <td class="text-end">@item.DescargaKilos.ToString("N0")</td>
                                    <td class="text-end unit-toggle-columns conversion-cell dual-value-cell">
                                        <span class="top-value">@((item.DescargaKilos / 45.359237M).ToString("N2")) qq</span>
                                        <span class="divider"></span>
                                        <span class="bottom-value">@Math.Round(item.DescargaKilos * 2.20462M).ToString("N0") lbs</span>
                                    </td>
                                    <td class="text-end">@item.FaltanteKilos.ToString("N0")</td>
                                    <td class="text-end">@item.ToneladasFaltantes.ToString("N2")</td>
                                    <td class="text-end unit-toggle-columns conversion-cell dual-value-cell">
                                        <span class="top-value">@((item.FaltanteKilos / 45.359237M).ToString("N2")) qq</span>
                                        <span class="divider"></span>
                                        <span class="bottom-value">@Math.Round(item.FaltanteKilos * 2.20462M).ToString("N0") lbs</span>
                                    </td>
                                    <td class="text-end">@item.CamionesFaltantes.ToString("N2")</td>
                                    <td class="text-center">@item.ConteoPlacas</td>
                                    <td class="text-end">@item.PorcentajeDescarga.ToString("N2")%</td>
                                </tr>
                            }
                        </tbody>
                        <tfoot>
                            <tr class="table-purple">
                                <td>Totales</td>
                                <td class="text-end">@Model.Sum(x => x.KilosRequeridos).ToString("N0")</td>
                                <td class="text-end">@Model.Sum(x => x.ToneladasRequeridas).ToString("N2")</td>
                                <td class="text-end">@Model.Sum(x => x.DescargaKilos).ToString("N0")</td>
                                <td class="text-end unit-toggle-columns conversion-cell dual-value-cell">
                                    <span class="top-value">@((Model.Sum(x => x.DescargaKilos) / 45.359237M).ToString("N2")) qq</span>
                                    <span class="divider"></span>
                                    <span class="bottom-value">@Math.Round(Model.Sum(x => x.DescargaKilos) * 2.20462M).ToString("N0") lbs</span>
                                </td>
                                <td class="text-end">@Model.Sum(x => x.FaltanteKilos).ToString("N0")</td>
                                <td class="text-end">@Model.Sum(x => x.ToneladasFaltantes).ToString("N2")</td>
                                <td class="text-end unit-toggle-columns conversion-cell dual-value-cell">
                                    <span class="top-value">@((Model.Sum(x => x.FaltanteKilos) / 45.359237M).ToString("N2")) qq</span>
                                    <span class="divider"></span>
                                    <span class="bottom-value">@Math.Round(Model.Sum(x => x.FaltanteKilos) * 2.20462M).ToString("N0") lbs</span>
                                </td>
                                <td class="text-end">@Model.Sum(x => x.CamionesFaltantes).ToString("N2")</td>
                                <td class="text-center">@Model.Sum(x => x.ConteoPlacas)</td>
                                <td class="text-end">
                                    @{
                                            var kilosRequeridos = Model.Sum(x => x.KilosRequeridos);
                                            var porcentaje = kilosRequeridos > 0
                                                    ? (Model.Sum(x => x.DescargaKilos) * 100.0M / kilosRequeridos)
                                                    : 0;
                                    }
                                    @porcentaje.ToString("N2")%
                                </td>
                            </tr>
                            <tr class="table-secondary">
                                <td colspan="10" class="text-end">Total de entregas registradas:</td>
                                <td class="text-center fw-bold">
                                    @{
                                        var totalCount = 0;
                                        if (ViewBag.TotalMovimientos != null)
                                        {
                                            totalCount = ViewBag.TotalMovimientos;
                                        }
                                        else if (ViewBag.totalMovimientos != null)
                                        {
                                            totalCount = ViewBag.totalMovimientos;
                                        }
                                        else if (ViewBag.Total != null)
                                        {
                                            totalCount = ViewBag.Total;
                                        }
                                        else if (ViewBag.Conteo != null)
                                        {
                                            totalCount = ViewBag.Conteo;
                                        }
                                    }
                                    @totalCount
                                </td>
                            </tr>
                        </tfoot>
                    </table>
                </div>
            }
        </div>
    </div>
</div>

<script>
    // Update the event handler for the Resumen button
    $('#btnExportarExcelResumen')
        .off('click')
        .on('click', function () {
            console.log('Exportando resumen agregado');
            exportResumenAgregadoToExcel('tabla2', 'Resumen_Agregado');
        });
</script>
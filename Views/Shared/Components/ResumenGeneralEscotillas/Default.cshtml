@using Sistema_de_Gestion_de_Importaciones.ViewModels
@model IEnumerable<Sistema_de_Gestion_de_Importaciones.ViewModels.EscotillaViewModel>
@{
    var totalKilosRequeridos = ViewData["KilosRequeridos"] is decimal kilosReq ? kilosReq : 0M;
    
    var estadoGeneral = ViewData["EstadoGeneral"] is string value5 ? value5 : "";

    var escotillasDiccionario = Model?.ToDictionary(e => e.NumeroEscotilla, e => e) ?? new Dictionary<int,
    Sistema_de_Gestion_de_Importaciones.ViewModels.EscotillaViewModel>();
    var todasLasEscotillas = Enumerable.Range(1, 5).OrderByDescending(x => x);
    var hayDatos = Model != null && Model.Any();
    
    decimal descargaTotal = 0;
    
    foreach (var numeroEscotilla in todasLasEscotillas)
    {
        var escotilla = escotillasDiccionario.GetValueOrDefault(numeroEscotilla, new EscotillaViewModel
        {
            CapacidadKg = 0,
            DescargaRealKg = 0,
            DiferenciaKg = 0
        });
        
        descargaTotal += escotilla.DescargaRealKg;
    }
    
    decimal diferenciaTotal = totalKilosRequeridos - descargaTotal;
    
    var porcentajeTotal = totalKilosRequeridos > 0 ? (descargaTotal / totalKilosRequeridos) * 100 : 0;
    var porcentajeFaltanteSobrante = totalKilosRequeridos > 0 ? Math.Abs(diferenciaTotal) / totalKilosRequeridos * 100 : 0;
    var esSobrante = diferenciaTotal < 0;
    var esFaltante = diferenciaTotal > 0;
    
    var ColorScheme = new
    {
        Verde = "#28a745",      
        Azul = "#0d6efd",      
        Gris = "#6c757d",       
        Rojo = "#dc3545",       
        Amarillo = "#ffc107",   
        Fondo = "#f8f9fa",     
        Blanco = "#ffffff",
        Naranja = "#0d6efd"  // Add this but use blue value since we're replacing orange with blue
    };

    Func<string, decimal, string> determinarColorUnificado = (estado, porcentaje) =>
    {
        var estadoLower = (estado ?? "").ToLower().Trim();
        
        if (estadoLower.Contains("complet")) return ColorScheme.Verde;
        if (estadoLower.Contains("proces") || estadoLower.Contains("descarg")) return porcentaje >= 90 ? ColorScheme.Azul : ColorScheme.Amarillo;
        if (estadoLower.Contains("sin") || estadoLower.Contains("inici")) return ColorScheme.Gris;
        
        if (porcentaje >= 100) return ColorScheme.Verde;
        if (porcentaje >= 90) return ColorScheme.Azul;
        
        return ColorScheme.Amarillo;  // Todo antes de 90% en amarillo
    };
    
    Func<decimal, string> determinarColorDiferencia = (diferencia) =>
    {
        if (diferencia < 0) return ColorScheme.Azul;  // Changed from Naranja to Azul
        if (diferencia > 0) return ColorScheme.Rojo;
        return "inherit";
    };

    var porcentajeCompletado = Math.Min(porcentajeTotal, 100);
    var colorEstado = determinarColorUnificado(estadoGeneral, porcentajeTotal);
    
    string estadoProgreso = porcentajeTotal >= 100 ? "Completado" :
                          porcentajeTotal >= 90 ? "Casi completo" :
                          porcentajeTotal >= 70 ? "En progreso" : "Iniciando";
}

<div class="col-lg-12">
    <div class="card mb-4 shadow-lg rounded-3 border-0 overflow-hidden">
        <div class="card-header bg-gradient bg-primary text-white py-3">
            <div class="d-flex align-items-center">
                <i class="fas fa-ship me-3 fa-fw fa-lg"></i>
                <h5 class="mb-0">Estado de Escotillas</h5>
            </div>
        </div>
        <div class="card-body bg-light p-4">
            @if (!hayDatos)
            {
                    <div class="alert alert-info mb-0 text-center py-4">
                        <i class="fas fa-info-circle me-2 fa-2x mb-3 d-block mx-auto"></i>
                        <h6>No hay datos disponibles para mostrar en este momento.</h6>
                    </div>
            }
            else
            {

            <div class="barco-visualizacion mb-4 shadow-sm rounded">
                        <!-- Contenedor del barco con posicionamiento relativo -->
                        <div class="barco-container position-relative overflow-auto">
                            <!-- Imagen del barco (fondo) -->
                            <img src="~/images/Barco.png" alt="Esquema de barco" class="barco-imagen w-100">
                            
                            <!-- Overlay para posicionar los indicadores de escotillas -->
                            <div class="escotillas-overlay">

                            <!-- Conversiones solo para el resumen -->
                            <div class="conversiones">
                                        <div class="unit-toggle-element" style="display: none; margin-top: 8px; font-size: 0.8rem; padding-top: 8px;">
                                            <div class="text-center mb-2 fw-bold">Conversiones</div>
                                            <!-- Modificar las lÃ­neas que muestran las conversiones -->
                                            <div class="d-flex justify-content-between">
                                                <span class="text-muted">Total:</span>
                                                <span>@((totalKilosRequeridos * 2.20462M).ToString("N2")) lbs / @((totalKilosRequeridos / 45.359237M).ToString("N2")) qq</span>
                                            </div>
                                            <div class="d-flex justify-content-between">
                                                <span class="text-muted">Descarga:</span>
                                                <span>@((descargaTotal * 2.20462M).ToString("N2")) lbs / @((descargaTotal / 45.359237M).ToString("N2")) qq</span>
                                            </div>
                                            <div class="d-flex justify-content-between">
                                                <span class="text-muted">Faltante:</span>
                                                <span style="color: @determinarColorDiferencia(diferenciaTotal)">
                                                    @(diferenciaTotal < 0 ? "+" : "")@Math.Abs(diferenciaTotal * 2.20462M).ToString("N2") lbs / 
                                                    @(diferenciaTotal < 0 ? "+" : "")@Math.Abs(diferenciaTotal / 45.359237M).ToString("N2") qq
                                                </span>
                                            </div>
                                        </div>
                            </div>

                            <button id="downloadBtn" class="btn btn-light btn-sm" title="Descargar imagen">
                                <i class="fas fa-download me-2"></i>Descargar
                            </button>

                            <div class="text-center mb-3">
                                <span class="badge bg-primary px-3 py-2">
                                    <i class="fas fa-ship me-2"></i>@ViewData["NombreBarco"]
                                </span>
                            </div>                            
                            <!-- Etiquetas para las escotillas -->
                            <div class="escotilla-labels">
                                <div class="escotilla-label-item mb-1">
                                    <div class="escotilla-label-text fw-bold">Total</div>
                                    <span class="fw-bold">@totalKilosRequeridos.ToString("N0")</span>
                                </div>
                                <div class="escotilla-label-item mb-1" style="margin-top: 22px;">
                                    <div class="escotilla-label-text fw-bold">Descarga</div>
                                    <span class="fw-bold">@descargaTotal.ToString("N0")</span>
                                </div>

                                <div class="escotilla-label-item mb-1" style="margin-top: 22px;">
                                <span class="fw-bold">@porcentajeTotal.ToString("N2")%</span>
                                </div>
                            </div>
                                @foreach (var numeroEscotilla in todasLasEscotillas)
                                {
                                    var escotilla = escotillasDiccionario.GetValueOrDefault(numeroEscotilla, new EscotillaViewModel
                                    { 
                                        CapacidadKg = 0, 
                                        DescargaRealKg = 0, 
                                        DiferenciaKg = 0,
                                        Estado = "Sin Iniciar" 
                                    });
                                    
                                    var porcentajeEscotilla = escotilla.CapacidadKg > 0 ? 
                                        (escotilla.DescargaRealKg / escotilla.CapacidadKg * 100) : 0;
                                    
                                    string badgeColor = determinarColorUnificado(escotilla.Estado, porcentajeEscotilla);
                                    
                                


                                    <!-- Posicionamiento de cada escotilla -->
                                    <div id="escotilla@(numeroEscotilla)" class="escotilla-indicador">
                                        
                                        <!-- Datos en formato vertical -->


                                        <div class="escotilla-datos">
                                            <div class="escotilla-dato mb-1">
                                                <div class="escotilla-valor fw-bold">@escotilla.CapacidadKg.ToString("N0")</div>
                                            </div>

                                            <br>
                                            
                                            
                                            <div class="escotilla-dato mb-1">
                                                <div class="escotilla-valor fw-bold" style="color: @badgeColor">@escotilla.DescargaRealKg.ToString("N0")</div>
                                            </div>

                                            <br>
                                            <div class="escotilla-dato">
                                                <div class="escotilla-valor fw-bold" style="color: @(escotilla.DiferenciaKg < 0 ? ColorScheme.Azul : (escotilla.DiferenciaKg > 0 ? ColorScheme.Rojo : "inherit"))">
                                                    Dif: @(escotilla.DiferenciaKg < 0 ? "+" : "")@Math.Abs(escotilla.DiferenciaKg).ToString("N0")
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                                
                                <!-- Indicador de resumen del barco con conversiones -->
                                <div class="barco-resumen">
                                    <div class="barco-resumen-datos">
                                        <div class="d-flex flex-column align-items-start">
                                            <span class="text-white mb-1">Falta</span>
                                            <span class="fw-bold" style="color: @determinarColorDiferencia(diferenciaTotal); font-family: Consolas, monospace;">
                                                @(diferenciaTotal < 0 ? "+" : "")@Math.Abs(diferenciaTotal).ToString("N0")
                                            </span>
                                            <br>
                                            <span class="fw-bold">@((100M - porcentajeTotal).ToString("N2"))%</span>                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                 <div class="row g-4">
                        <div class="col-lg-5">
                            <div class="card bg-white shadow-sm h-100 border-0 rounded-4 overflow-hidden">
                                <div class="card-header bg-white border-0 pt-4 pb-0">
                                    <h6 class="text-success fw-bold mb-0">
                                        <i class="fas fa-tachometer-alt me-2"></i>Progreso General
                                    </h6>
                                </div>
                                <div class="card-body p-4">
                                    <div class="position-relative mb-4">
                                        <div class="custom-progress-container">
                                            <div id="progressBarMain" 
                                                 class="custom-progress-bar" 
                                                 data-porcentaje="@porcentajeCompletado.ToString("0.##", System.Globalization.CultureInfo.InvariantCulture)" 
                                                 style="width: 0%; background-color: @colorEstado;">
                                            </div>
                                            <div class="progress-text">
                                                <span class="fw-bold fs-5">@porcentajeTotal.ToString("N2")%</span>
                                            </div>
                                        </div>
                                    </div>

                                    <script>
                                        document.addEventListener('DOMContentLoaded', function() {
                                            setTimeout(function() {
                                                const progressBar = document.getElementById('progressBarMain');
                                                if (progressBar) {
                                                    const porcentaje = parseFloat(progressBar.getAttribute('data-porcentaje'));
                                                    progressBar.style.width = porcentaje + '%';
                                                    console.log('Barra de progreso actualizada:', porcentaje + '%');
                                                }
                                            }, 100);
                                        });
                                    </script>

                                    <div class="d-flex justify-content-between px-2 mb-3">
                                        <span class="small text-muted">0%</span>
                                        <span class="small text-muted">50%</span>
                                        <span class="small text-muted">100%</span>
                                    </div>

                                    <div class="text-center mt-3">
                                        <span class="badge p-2 px-4 fs-6" style="background-color: @colorEstado; box-shadow: 0 2px 6px rgba(0,0,0,0.15);">
                                            <i class="fas fa-chart-line me-2"></i>
                                            @estadoProgreso @(esSobrante ? " (Con Sobrante)" : "")
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    
                        <div class="col-lg-7">
                            <div class="card bg-white shadow-sm h-100 border-0 rounded-4 overflow-hidden">
                                <div class="card-header bg-white border-0 pt-4 pb-0">
                                    <h6 class="text-success fw-bold mb-0">
                                        <i class="fas fa-chart-pie me-2"></i>Resumen de Carga
                                    </h6>
                                </div>
                                <div class="card-body p-4">
                                    <div class="row g-3 text-center">
                                        <div class="col-md-4">
                                            <div class="metric-box p-3 border rounded-4 bg-light h-100 shadow-sm d-flex flex-column justify-content-center position-relative overflow-hidden">
                                                <div class="metric-icon position-absolute opacity-10" style="top: -15px; right: -15px; font-size: 4rem; color: #e0e0e0;">
                                                    <i class="fas fa-weight"></i>
                                                </div>
                                                <div class="position-relative">
                                                    <div class="small text-muted mb-1">Requerido</div>
                                                    <div class="fw-bold fs-4 mb-1">@totalKilosRequeridos.ToString("N0") Kg</div>
                                                    <div class="small text-primary unit-toggle-element" style="display: none;">
                                                        @((totalKilosRequeridos * 2.20462M).ToString("N0")) lbs | 
                                                        @((totalKilosRequeridos / 45.359237M).ToString("N2")) qq
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    
                                        <div class="col-md-4">
                                            <div class="metric-box p-3 border rounded-4 bg-light h-100 shadow-sm d-flex flex-column justify-content-center position-relative overflow-hidden">
                                                <div class="metric-icon position-absolute opacity-10" style="top: -15px; right: -15px; font-size: 4rem; color: #e0e0e0;">
                                                    <i class="fas fa-dolly"></i>
                                                </div>
                                                <div class="position-relative">
                                                    <div class="small text-muted mb-1">Descargado</div>
                                                    <div class="fw-bold fs-4 mb-1">@descargaTotal.ToString("N0") Kg</div>
                                                    <div class="small text-primary unit-toggle-element" style="display: none;">
                                                        @((descargaTotal * 2.20462M).ToString("N0")) lbs | 
                                                        @((descargaTotal / 45.359237M).ToString("N2")) qq
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    
                                        <div class="col-md-4">
                                            <div class="metric-box p-3 border rounded-4 h-100 shadow-sm d-flex flex-column justify-content-center position-relative overflow-hidden" 
                                                 style="background-color: @(esSobrante ? ColorScheme.Azul : esFaltante ? ColorScheme.Rojo : "#f8f9fa"); 
                                                        opacity: @(esSobrante || esFaltante ? "0.85" : "1")">
                                                
                                                <div class="metric-icon position-absolute opacity-10" style="top: -15px; right: -15px; font-size: 4rem; color: @(esSobrante || esFaltante ? "rgba(255,255,255,0.2)" : "#e0e0e0");">
                                                    <i class="fas @(esSobrante ? "fa-plus-circle" : esFaltante ? "fa-minus-circle" : "fa-equals")"></i>
                                                </div>
                                                <div class="position-relative">
                                                    <div class="small @(esSobrante || esFaltante ? "text-white" : "text-muted") mb-1">
                                                        @(esSobrante ? "Sobrante" : esFaltante ? "Faltante" : "Diferencia")
                                                    </div>
                                                    <div class="fw-bold fs-4 mb-1 @(esSobrante || esFaltante ? "text-white" : "")">
                                                        @(esSobrante ? "+" : esFaltante ? "-" : "")@Math.Abs(diferenciaTotal).ToString("N0") Kg
                                                        <div class="mt-1 small @(esSobrante || esFaltante ? "text-white" : "") unit-toggle-element" style="display: none;">
                                                            @(esSobrante ? "+" : esFaltante ? "-" : "")@Math.Abs(diferenciaTotal * 2.20462M).ToString("N0") lbs | 
                                                            @(esSobrante ? "+" : esFaltante ? "-" : "")@Math.Abs(diferenciaTotal / 45.359237M).ToString("N2") qq
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    
                        <div class="col-12">
                            <div class="card bg-white shadow-sm border-0 rounded-4 overflow-hidden">
                                <div class="card-header bg-white border-0 pt-4 pb-0">
                                    <h6 class="text-success fw-bold mb-0">
                                        <i class="fas fa-chart-pie me-2"></i>Estado de Descarga por Escotilla
                                    </h6>
                                </div>
                                <div class="card-body p-4">
                                    <div class="row g-4 justify-content-center">
                                        @foreach (var numeroEscotilla in todasLasEscotillas)
                                        {
                                                var escotilla = escotillasDiccionario.GetValueOrDefault(numeroEscotilla, new
                                                EscotillaViewModel
                                                { CapacidadKg = 0, DescargaRealKg = 0, Estado = "Sin Iniciar" });
                                        
                                                var porcentajeEscotilla = escotilla.CapacidadKg > 0 ?
                                                                                                  (escotilla.DescargaRealKg / escotilla.CapacidadKg * 100) : 0;
                                                var porcentajeMostrar = Math.Min(porcentajeEscotilla, 100);
                                        
                                                string estadoBajo = escotilla.Estado.ToLower();
                                                string donutColor = determinarColorUnificado(escotilla.Estado, porcentajeEscotilla);

                                                <div class="col-md-6 col-lg-2 text-center">
                                                    <div class="escotilla-card p-3 border rounded-4 shadow-sm hover-lift">
                                                        <div class="escotilla-number fw-bold text-success mb-2">Escotilla @numeroEscotilla</div>
                                                        <div class="donut-chart-container position-relative mx-auto" style="width: 160px; height: 160px;">
                                                            <canvas id="donutChart@(numeroEscotilla)" width="160" height="160" 
                                                                  data-porcentaje="@porcentajeMostrar" 
                                                                  data-color="@donutColor"
                                                                  data-estado="@escotilla.Estado"></canvas>
                                                            <div class="position-absolute top-50 start-50 translate-middle text-center" style="width: 100%;">
                                                                <span class="fw-bold d-block" style="font-size: 2rem; color: @donutColor;">@porcentajeEscotilla.ToString("0")%</span>
                                                                <span class="badge rounded-pill px-2" style="background-color: @donutColor !important; font-size: 0.7rem;">
                                                                    <i class="fas @(estadoBajo.Contains("complet") ? "fa-check-circle" : 
                                                                                  estadoBajo.Contains("proces") ? "fa-sync-alt" : "fa-clock") me-1"></i>
                                                                @escotilla.Estado
                                                            </span>
                                                        </div>
                                                    </div>
                                                    <div class="mt-3 small text-muted">
                                                        <div class="d-flex justify-content-between border-bottom pb-2 mb-2">
                                                            <span>Capacidad:</span>
                                                            <span class="fw-bold">@escotilla.CapacidadKg.ToString("N0") Kg
                                                                <span class="unit-toggle-element d-block small text-muted" style="display: none;">
                                                                    @((escotilla.CapacidadKg * 2.20462M).ToString("N0")) lbs | 
                                                                    @((escotilla.CapacidadKg / 45.359237M).ToString("N2")) qq
                                                                </span>
                                                            </span>
                                                        </div>
                                                        <div class="d-flex justify-content-between border-bottom pb-2 mb-2">
                                                            <span>Descargado:</span>
                                                            <span class="fw-bold" style="color: @donutColor">
                                                                @escotilla.DescargaRealKg.ToString("N0") Kg
                                                                <span class="unit-toggle-element d-block small" style="display: none;">
                                                                    @((escotilla.DescargaRealKg * 2.20462M).ToString("N0")) lbs | 
                                                                    @((escotilla.DescargaRealKg / 45.359237M).ToString("N2")) qq
                                                                </span>
                                                            </span>
                                                        </div>
                                                        <div class="d-flex justify-content-between">
                                                            <span>Diferencia:</span>
                                                            <span class="fw-bold" style="color: @(escotilla.DiferenciaKg < 0 ? ColorScheme.Azul : (escotilla.DiferenciaKg > 0 ? ColorScheme.Rojo : "inherit"))">
                                                                @(escotilla.DiferenciaKg < 0 ? "+" : "")@Math.Abs(escotilla.DiferenciaKg).ToString("N0") Kg
                                                                <span class="unit-toggle-element d-block small" style="display: none;">
                                                                    @(escotilla.DiferenciaKg < 0 ? "+" : "")@Math.Abs(escotilla.DiferenciaKg * 2.20462M).ToString("N0")) lbs | 
                                                                    @(escotilla.DiferenciaKg < 0 ? "+" : "")@Math.Abs(escotilla.DiferenciaKg / 45.359237M).ToString("N2")) qq
                                                                </span>
                                                            </span>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>                

                    <!-- Scripts para grÃ¡ficos -->
                    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
                    <script>
    document.addEventListener('DOMContentLoaded', function () {
        const COLORS = {
            COMPLETE: '@ColorScheme.Verde',
            IN_PROGRESS: '@ColorScheme.Azul',
            PENDING: '@ColorScheme.Gris',
            BACKGROUND: '@ColorScheme.Fondo',
            WARNING: '@ColorScheme.Amarillo',
            DANGER: '@ColorScheme.Rojo',
            INFO: '@ColorScheme.Azul' 
        };

        function determinarColor(estado, porcentaje) {
            estado = (estado || '').toLowerCase().trim();
        
            if (estado.includes('complet')) return COLORS.COMPLETE;
            if (estado.includes('proces') || estado.includes('descarg')) {
                return porcentaje >= 90 ? COLORS.IN_PROGRESS : COLORS.WARNING; 
            }
            if (estado.includes('sin') || estado.includes('inici')) return COLORS.PENDING;
        
            if (porcentaje >= 100) return COLORS.COMPLETE;
            if (porcentaje >= 90) return COLORS.IN_PROGRESS; 
            
            return COLORS.WARNING;
        }

        function initializeDonutCharts() {
            document.querySelectorAll('canvas[id^="donutChart"]').forEach(canvas => {
                const porcentaje = parseFloat(canvas.getAttribute('data-porcentaje') || 0);
                const estado = canvas.getAttribute('data-estado');
                const complemento = 100 - porcentaje;
            
                const color = determinarColor(estado, porcentaje);

                if (Chart.getChart(canvas)) {
                    Chart.getChart(canvas).destroy();
                }

                new Chart(canvas.getContext('2d'), {
                    type: 'doughnut',
                    data: {
                        datasets: [{
                            data: [porcentaje, complemento],
                            backgroundColor: [color, COLORS.BACKGROUND],
                            borderWidth: 0,
                            borderRadius: 5,
                            hoverOffset: 4
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        cutout: '75%',
                        rotation: -90,
                        circumference: 360,
                        plugins: {
                            legend: { display: false },
                            tooltip: { enabled: false }
                        },
                        animation: {
                            animateRotate: true,
                            animateScale: true,
                            duration: 2000,
                            easing: 'easeOutQuart'
                        }
                    }
                });

                const container = canvas.closest('.donut-chart-container');
                if (container) {
                    const badge = container.querySelector('.badge');
                    if (badge) {
                        badge.style.backgroundColor = color;
                        badge.style.color = 'white';
                    }
                
                    const porcentajeSpan = container.querySelector('.fw-bold');
                    if (porcentajeSpan) {
                        porcentajeSpan.style.color = color; 
                    }
                }
            });
        }

        setTimeout(initializeDonutCharts, 300);

        const observer = new MutationObserver(() => {
            initializeDonutCharts();
        });

        const container = document.querySelector('.card-body');
        if (container) {
            observer.observe(container, { 
                childList: true, 
                subtree: true 
            });
        }
    });
</script>
// Agregar antes del cierre del body
<script src="https://html2canvas.hertzen.com/dist/html2canvas.min.js"></script>
<script>
document.getElementById('downloadBtn').addEventListener('click', async function() {
    try {
        this.disabled = true;
        this.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Procesando...';

        // Primero, obtener solo el contenedor del barco
        const barcoContainer = document.querySelector('.barco-container');
        
        // Crear un contenedor temporal con dimensiones fijas
        const tempContainer = document.createElement('div');
        tempContainer.style.width = '1600px';
        tempContainer.style.height = '437px';
        tempContainer.style.position = 'absolute';
        tempContainer.style.left = '-9999px';
        document.body.appendChild(tempContainer);

        // Clonar el contenido
        const clon = barcoContainer.cloneNode(true);
        tempContainer.appendChild(clon);

        // Forzar las posiciones correctas en el clon
        const escotillas = {
            5: { top: 217, left: 421 },
            4: { top: 217, left: 599 },
            3: { top: 217, left: 778 },
            2: { top: 217, left: 943 },
            1: { top: 217, left: 1085 }
        };

        // Ajustar posiciones de cada escotilla
        Object.entries(escotillas).forEach(([num, pos]) => {
            const escotilla = clon.querySelector(`#escotilla${num}`);
            if (escotilla) {
                escotilla.style.position = 'absolute';
                escotilla.style.top = `${pos.top}px`;
                escotilla.style.left = `${pos.left}px`;
                escotilla.style.zIndex = '10';
            }
        });

        // Ajustar posiciÃ³n de las etiquetas
        const labels = clon.querySelector('.escotilla-labels');
        if (labels) {
            labels.style.position = 'absolute';
            labels.style.top = '202px';
            labels.style.left = '227px';
            labels.style.zIndex = '6';
        }

        // Ajustar posiciÃ³n del resumen
        const resumen = clon.querySelector('.barco-resumen');
        if (resumen) {
            resumen.style.position = 'absolute';
            resumen.style.bottom = '124px';
            resumen.style.left = '1217px';
            resumen.style.zIndex = '20';
        }

        // ConfiguraciÃ³n de html2canvas
        const options = {
            width: 1600,
            height: 437,
            scale: 2,
            useCORS: true,
            allowTaint: true,
            backgroundColor: '#ffffff',
            logging: false,
            removeContainer: true,
            ignoreElements: (element) => {
                return element.classList.contains('capturing') || 
                       element.id === 'downloadBtn';
            }
        };

        // Generar la imagen
        const canvas = await html2canvas(tempContainer, options);
        
        // Crear y descargar la imagen
        const link = document.createElement('a');
        link.download = `visualizacion-barco-${new Date().toISOString().slice(0,10)}.png`;
        link.href = canvas.toDataURL('image/png');
        link.click();

        // Limpiar
        document.body.removeChild(tempContainer);
        this.disabled = false;
        this.innerHTML = '<i class="fas fa-download me-2"></i>Descargar';

    } catch (error) {
        console.error('Error:', error);
        alert('Error al generar la imagen. Por favor, intente nuevamente.');
        this.disabled = false;
        this.innerHTML = '<i class="fas fa-download me-2"></i>Descargar';
    }
});
</script>
<script>
    // Sincronizar con el estado global del toggle
    document.addEventListener('DOMContentLoaded', function() {
        // Asegurarse que todos los elementos estÃ¡n ocultos inicialmente
        const unitToggleElements = document.querySelectorAll('.unit-toggle-element');
        const unitToggleRows = document.querySelectorAll('.unit-toggle-row');
        
        // Ocultar todo por defecto
        unitToggleElements.forEach(el => { el.style.display = 'none'; });
        unitToggleRows.forEach(row => { el.style.display = 'none'; });
        
        // Verificar si ya se inicializÃ³ el toggle en otro lugar
        setTimeout(function() {
            // Si el estado global indica mostrar unidades alternativas
            if (window.showingMetric === false) {
                unitToggleElements.forEach(el => {
                    $(el).fadeIn(300);
                });
                
                unitToggleRows.forEach(row => {
                    $(row).fadeIn(300);
                });
            }
        }, 300);
        
        // Escuchar eventos globales de cambio de unidades
        window.addEventListener('unitToggleChanged', function(e) {
            const showAlternative = e.detail.showAlternative;
            
            unitToggleElements.forEach(el => {
                if (showAlternative) {
                    $(el).fadeIn(300);
                } else {
                    $(el).fadeOut(300);
                }
            });
            
            unitToggleRows.forEach(row => {
                if (showAlternative) {
                    $(row).fadeIn(300);
                } else {
                    $(row).fadeOut(300);
                }
            });
        });
    });
</script>
<script>
    // FunciÃ³n para asegurar que todas las cards de escotillas respondan al toggle
    function verificarElementosToggle() {
        // Verificar elementos en las cards de escotillas
        const elementosEscotilla = document.querySelectorAll('.escotilla-card .unit-toggle-element');
        console.log('Elementos toggle en escotillas encontrados:', elementosEscotilla.length);
        
        // Si no hay elementos o son pocos, verificar la estructura
        if (elementosEscotilla.length < 10) {
            // Buscar elementos que podrÃ­an necesitar la clase unit-toggle-element
            const posiblesElementosToggle = document.querySelectorAll('.escotilla-card span:contains("lbs"), .escotilla-card span:contains("qq")');
            console.log('Posibles elementos que necesitan clase toggle:', posiblesElementosToggle.length);
        }
        
        // Verificar filas de tabla toggle
        const filasToggle = document.querySelectorAll('.unit-toggle-row');
        console.log('Filas con toggle encontradas:', filasToggle.length);
    }
    
    document.addEventListener('DOMContentLoaded', function() {
        // Ejecutar verificaciÃ³n despuÃ©s de que todo estÃ© cargado
        setTimeout(verificarElementosToggle, 1000);
    });
</script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Asegurarse que todos los elementos estÃ©n ocultos inicialmente
        const unitToggleElements = document.querySelectorAll('.unit-toggle-element');
        const unitToggleRows = document.querySelectorAll('.unit-toggle-row');
        
        // Ocultar todo por defecto
        unitToggleElements.forEach(el => { el.style.display = 'none'; });
        unitToggleRows.forEach(row => { row.style.display = 'none'; });
        
        // Escuchar eventos globales de cambio de unidades desde registroPesajes.js
        window.addEventListener('unitToggleChanged', function(e) {
            const showAlternative = e.detail.showAlternative;
            
            // Aplicar a los elementos de este componente
            unitToggleElements.forEach(el => {
                if (showAlternative) {
                    $(el).fadeIn(300);
                } else {
                    $(el).fadeOut(300);
                }
            });
            
            unitToggleRows.forEach(row => {
                if (showAlternative) {
                    $(row).fadeIn(300);
                } else {
                    $(row).fadeOut(300);
                }
            });
        });
        
        // Verificar estado inicial despuÃ©s de cargar
        setTimeout(function() {
            if (window.showingMetric === false) {
                unitToggleElements.forEach(el => {
                    $(el).show();
                });
                
                unitToggleRows.forEach(row => {
                    $(row).show();
                });
            }
            
            // Ejecutar verificaciÃ³n despuÃ©s de que todo estÃ© cargado
            verificarElementosToggle();
        }, 300);
    });

    // FunciÃ³n para asegurar que todas las cards de escotillas respondan al toggle
    function verificarElementosToggle() {
        // Verificar elementos en las cards de escotillas
        const elementosEscotilla = document.querySelectorAll('.escotilla-card .unit-toggle-element');
        console.log('Elementos toggle en escotillas encontrados:', elementosEscotilla.length);
        
        // Verificar filas de tabla toggle
        const filasToggle = document.querySelectorAll('.unit-toggle-row');
        console.log('Filas con toggle encontradas:', filasToggle.length);
        
        // Forzar actualizaciÃ³n de visualizaciÃ³n para las cards de escotillas si es necesario
        if (window.showingMetric === false) {
            elementosEscotilla.forEach(el => {
                el.style.display = 'block';
            });
        }
    }
</script>
<script>
    // DiagnÃ³stico para verificar si las unidades se muestran correctamente
    function diagnosticarToggleUnidades() {
        console.group("DiagnÃ³stico de toggle de unidades");
        console.log("showingMetric global:", window.showingMetric);
        
        const elementosToggle = document.querySelectorAll('.unit-toggle-element');
        const elementosToggleVisibles = Array.from(elementosToggle).filter(el => 
            el.style.display !== 'none' && getComputedStyle(el).display !== 'none');
        
        console.log("Elementos con clase unit-toggle-element:", elementosToggle.length);
        console.log("Elementos visibles:", elementosToggleVisibles.length);
        
        // Verificar elementos especÃ­ficos
        const escotillaToggleElements = document.querySelectorAll('.escotilla-card .unit-toggle-element');
        console.log("Elementos en escotillas:", escotillaToggleElements.length);
        console.log("Elementos visibles en escotillas:", 
            Array.from(escotillaToggleElements).filter(el => 
                el.style.display !== 'none' && getComputedStyle(el).display !== 'none').length);
        
        console.groupEnd();
    }
    
    // Ejecutar diagnÃ³stico despuÃ©s de la carga inicial y cada vez que cambia el estado
    setTimeout(diagnosticarToggleUnidades, 1000);
    window.addEventListener('unitToggleChanged', function() {
        setTimeout(diagnosticarToggleUnidades, 500);
    });
</script>
<script>
    // FunciÃ³n mejorada para diagnosticar y corregir problemas de visualizaciÃ³n de unidades
    function diagnosticarToggleUnidades(forceUpdate = false) {
        console.group("DiagnÃ³stico y correcciÃ³n de toggle de unidades");
        
        // Usar try-catch para prevenir errores de localStorage en entornos restrictivos
        let savedMetricState;
        try {
            savedMetricState = localStorage.getItem('showingMetric');
        } catch (error) {
            console.warn("Error accediendo a localStorage:", error);
            savedMetricState = 'true'; // Valor predeterminado seguro
        }
        
        // Si no hay valor en localStorage o es indefinido, forzar a true (mÃ©trico)
        if (savedMetricState === null || typeof savedMetricState === 'undefined') {
            try {
                localStorage.setItem('showingMetric', 'true');
            } catch (error) {
                console.warn("No se pudo guardar en localStorage:", error);
            }
            window.showingMetric = true;
        } else {
            // Actualizar variable global para reflejar el valor en localStorage
            window.showingMetric = savedMetricState === 'true';
        }
        
        const showAlternative = window.showingMetric === false;
        console.log("Estado actual: showingMetric =", window.showingMetric);
        console.log("Estado en localStorage =", savedMetricState);
        console.log("Mostrando unidades alternativas:", showAlternative);
        
        // Seleccionar todos los elementos de toggle en este componente
        const toggleElements = document.querySelectorAll('.unit-toggle-element');
        const toggleRows = document.querySelectorAll('.unit-toggle-row');
        
        console.log("Total elementos toggle encontrados:", toggleElements.length);
        console.log("Total filas toggle encontradas:", toggleRows.length);
        
        // Aplicar visibilidad directamente basada en el estado global
        toggleElements.forEach(el => {
            if (showAlternative) {
                el.style.display = 'block';
                el.classList.add('show');
            } else {
                el.style.display = 'none';
                el.classList.remove('show');
            }
        });
        
        // Misma lÃ³gica para filas
        toggleRows.forEach(row => {
            if (showAlternative) {
                row.style.display = 'table-row'; // Mostrar como fila de tabla
                row.classList.add('show');
            } else {
                row.style.display = 'none';
                row.classList.remove('show');
            }
        });
        
        console.groupEnd();
        
        // Retornar estado para validaciÃ³n
        return { 
            updated: true,
            showAlternative: showAlternative
        };
    }
    
    // VersiÃ³n simplificada y mÃ¡s robusta para ejecutar diagnÃ³stico y correcciÃ³n
    document.addEventListener('DOMContentLoaded', function() {
        // Inicializar estado una vez al cargar
        setTimeout(() => diagnosticarToggleUnidades(true), 300);
        
        // Escuchar eventos de cambio de unidades y aplicar cambios
        window.addEventListener('unitToggleChanged', function(e) {
            const showAlternative = e.detail.showAlternative;
            
            // Sincronizar el estado global con el evento
            window.showingMetric = !showAlternative;
            
            // Aplicar el cambio directamente sin diagnÃ³stico
            const toggleElements = document.querySelectorAll('.unit-toggle-element');
            const toggleRows = document.querySelectorAll('.unit-toggle-row');
            
            // Actualizar elementos
            toggleElements.forEach(el => {
                if (showAlternative) {
                    el.style.display = 'block';
                    el.classList.add('show');
                } else {
                    el.style.display = 'none';
                    el.classList.remove('show');
                }
            });
            
            // Actualizar filas
            toggleRows.forEach(row => {
                if (showAlternative) {
                    row.style.display = 'table-row';
                    row.classList.add('show');
                } else {
                    row.style.display = 'none';
                    row.classList.remove('show');
                }
            });
        });
    });
    
    // VerificaciÃ³n simplificada del estado inicial
    (function() {
        try {
            const savedMetricState = localStorage.getItem('showingMetric');
            window.showingMetric = savedMetricState !== null ? savedMetricState === 'true' : true;
        } catch (error) {
            console.warn("Error accediendo a localStorage durante inicializaciÃ³n:", error);
            window.showingMetric = true; // Valor predeterminado seguro
        }
    })();
</script>

<!-- Reemplazar todos los scripts de manejo de unidades con una versiÃ³n compatible -->
<script>
    // Detector de entorno aislado y especÃ­fico solo para este componente
    (function() {
        // EncapsulaciÃ³n para evitar interferencias con el scope global
        const componentId = 'escotillas-component-' + Math.random().toString(36).substr(2, 9);
        
        function initComponentUnitToggleHandler() {
            // Seleccionar solo elementos dentro de este componente
            const container = document.currentScript.closest('.col-lg-12');
            if (!container) return;
            
            const unitToggleElements = container.querySelectorAll('.unit-toggle-element');
            const unitToggleRows = container.querySelectorAll('.unit-toggle-row');
            
            // FunciÃ³n para aplicar estado sin depender de jQuery ni tocar variables globales
            function applyStateToElements(showAlternative) {
                // Elementos toggle
                unitToggleElements.forEach(function(element) {
                    element.style.display = showAlternative ? 'block' : 'none';
                    if (showAlternative) element.classList.add('show');
                    else element.classList.remove('show');
                });
                
                // Filas toggle
                unitToggleRows.forEach(function(row) {
                    row.style.display = showAlternative ? 'table-row' : 'none';
                    if (showAlternative) row.classList.add('show');
                    else element.classList.remove('show');
                });
            }
            
            // Escuchar evento unitToggleChanged de manera segura
            window.addEventListener('unitToggleChanged', function(e) {
                if (e && e.detail) {
                    const showAlternative = e.detail.showAlternative;
                    applyStateToElements(showAlternative);
                }
            });
            
            // Verificar estado inicial
            try {
                const savedMetricState = localStorage.getItem('showingMetric');
                const showAlternative = savedMetricState === 'false';
                applyStateToElements(showAlternative);
            } catch (error) {
                console.warn('Error al leer estado inicial de unidades:', error);
            }
        }
        
        // EjecuciÃ³n segura cuando el DOM estÃ© listo
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initComponentUnitToggleHandler);
        } else {
            initComponentUnitToggleHandler();
        }
    })();
</script>

<script>
    // VerificaciÃ³n retardada para asegurar sincronizaciÃ³n en Azure
    document.addEventListener('DOMContentLoaded', function() {
        // Dar tiempo para que se ejecute el cÃ³digo global primero
        setTimeout(function() {
            // Detectar si estamos en Azure
            const isProduction = window.location.hostname.includes('azure');
            
            if (!isProduction) return; // Solo ejecutar en producciÃ³n
            
            // VerificaciÃ³n especÃ­fica para Azure
            setTimeout(function() {
                try {
                    // Leer estado del localStorage
                    const savedMetricState = localStorage.getItem('showingMetric');
                    if (savedMetricState === null) return;
                    
                    // Determinar si debe mostrar unidades alternativas
                    const showAlternative = savedMetricState === 'false';
                    
                    // Obtener los elementos solo para este componente
                    const container = document.querySelector('.col-lg-12');
                    if (!container) return;
                    
                    const unitElements = container.querySelectorAll('.unit-toggle-element');
                    const unitRows = container.querySelectorAll('.unit-toggle-row');
                    
                    // Verificar si hay inconsistencia
                    const firstElement = unitElements.length > 0 ? unitElements[0] : null;
                    const elementVisible = firstElement ? 
                        (getComputedStyle(firstElement).display !== 'none') : false;
                    
                    const needsUpdate = (showAlternative && !elementVisible) || 
                                      (!showAlternative && elementVisible);
                    
                    // Solo actualizar si hay inconsistencia
                    if (needsUpdate) {
                        console.log("Sincronizando elementos en escotillas...");
                        unitElements.forEach(function(el) {
                            el.style.display = showAlternative ? 'block' : 'none';
                            if (showAlternative) el.classList.add('show');
                            else el.classList.remove('show');
                        });
                        
                        unitRows.forEach(function(row) {
                            row.style.display = showAlternative ? 'table-row' : 'none';
                            if (showAlternative) row.classList.add('show');
                            else row.classList.remove('show');
                        });
                    }
                } catch (error) {
                    console.warn("Error en sincronizaciÃ³n para Azure:", error);
                }
            }, 1500); // Retrasar verificaciÃ³n para dar tiempo al sistema global
        }, 500);
    });
</script>

<script>
function centrarContenidoBarco() {
    // Mantener la posiciÃ³n natural del scroll
    const barcoContainer = document.querySelector('.barco-container');
    if (barcoContainer) {
        barcoContainer.style.transform = 'none';
        barcoContainer.style.maxWidth = 'none';
        barcoContainer.style.width = '1600px';
    }
}
</script>

<style>
    /* Asegurar que los elementos toggle se muestren correctamente cuando estÃ¡n activos */
    .unit-toggle-element.show {
        display: block !important;
    }
    
    /* Asegurar que las filas toggle se muestren correctamente cuando estÃ¡n activas */
    tr.unit-toggle-row.show {
        display: table-row !important;
    }
    
    /* Estilos especÃ­ficos para elementos en cards de escotillas */
    .escotilla-card .unit-toggle-element.show {
        display: block !important;
        margin-top: 3px;
    }
    
    /* Fijar altura mÃ­nima para las cards de escotilla para consistencia */
    .escotilla-card {
        min-height: 380px;
        display: flex;
        flex-direction: column;
    }
    
    /* Hacer que el contenedor de grÃ¡ficos tenga altura fija */
    .donut-chart-container {
        height: 160px;
        margin-bottom: 1rem;
        flex-shrink: 0; /* Evitar que se comprima */
    }
    
    /* Hacer que los datos de la card se expandan para llenar el espacio restante */
    .escotilla-card .mt-3.small.text-muted {
        flex-grow: 1;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }
    
    /* Asegurar que todas las secciones de informaciÃ³n tienen el mismo alto */
    .escotilla-card .d-flex.justify-content-between {
        min-height: 2.5rem; /* Altura mÃ­nima para cada lÃ­nea */
        display: flex;
        align-items: center;
    }
</style>

<style>
    /* Estilos existentes para el donut chart... */
    .donut-chart-container {
        position: relative;
        margin: auto;
        width: 160px;
        height: 160px;
    }
    
    /* ModificaciÃ³n para hacer las cards de escotilla mÃ¡s uniformes */
    .col-md-6.col-lg-2.text-center {
        display: flex; /* Usar flexbox para igualar alturas */
    }
    
    .col-md-6.col-lg-2.text-center > div {
        width: 100%; /* Asegurar que la card ocupe todo el ancho */
        display: flex;
        flex-direction: column;
    }
    
    /* Hacer que todas las cards tengan la misma altura basada en la mÃ¡s alta */
    .escotilla-card {
        height: 100%;
        min-height: 380px;
        display: flex;
        flex-direction: column;
    }
    
    /* La secciÃ³n de detalles crece para llenar el espacio disponible */
    .escotilla-card .mt-3.small.text-muted {
        flex-grow: 1;
        display: flex;
        flex-direction: column;
    }
    
    /* Los separadores deben tener margen consistente */
    .escotilla-card .d-flex.justify-content-between {
        padding: 0.5rem 0;
    }
    
    /* Resto de estilos existentes... */
    .donut-chart-container canvas {
        position: relative;
        z-index: 1;
    }
    
    .donut-chart-container {
        position: relative;
        margin: auto;
        width: 160px;
        height: 160px;
    }

    .donut-chart-container canvas {
        position: relative;
        z-index: 1;
    }

    .donut-chart-container .badge {
        transition: background-color 0.3s ease;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    .estado-badge, .badge {
        font-weight: 500;
        letter-spacing: 0.3px;
        text-shadow: 0 1px 2px rgba(0,0,0,0.1);
    }
    
    .badge i, .estado-badge i {
        margin-right: 4px;
        font-size: 0.85em;
    }
    
    .text-success {
        color: @ColorScheme.Verde !important;
    }
    
    .text-danger {
        color: @ColorScheme.Rojo !important;
    }

    .escotilla-card {
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

    .escotilla-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 15px rgba(0,0,0,0.1) !important;
    }

    .custom-progress-container {
        height: 34px;
        background-color: #f0f0f0;
        border-radius: 8px;
        position: relative;
        overflow: hidden;
        box-shadow: inset 0 1px 3px rgba(0,0,0,0.1);
    }

    .custom-progress-bar {
        height: 100%;
        transition: width 1s ease-in-out;
        position: absolute;
        left: 0;
        top: 0;
    }

    .progress-text {
        position: absolute;
        width: 100%;
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1;
        color: #000;
        text-shadow: 0px 0px 3px rgba(255,255,255,0.9);
    }
    
    /* Nuevos estilos para unidades de medida */
    .unit-toggle-element {
        display: none; /* Inicialmente oculto */
        margin-top: 3px;
        padding-top: 2px;
        border-top: 1px dotted rgba(0,0,0,0.1);
        transition: opacity 0.3s ease;
    }
    
    /* Estilos especÃ­ficos para tarjetas */
    .escotilla-card .unit-toggle-element {
        font-size: 0.75rem !important;
        color: inherit;
        opacity: 0.85;
        line-height: 1.2;
    }
    
    /* Para mÃ©tricas */
    .metric-box .unit-toggle-element {
        font-size: 0.8rem !important;
        line-height: 1.3;
    }
    
    /* Para elementos con fondo de color */
    .bg-primary .unit-toggle-element,
    .bg-success .unit-toggle-element,
    .bg-danger .unit-toggle-element,
    [style*="background-color"] .unit-toggle-element {
        border-top-color: rgba(255,255,255,0.2);
    }

    /* Nuevos estilos para unidades de medida - asegurar que estÃ¡n ocultos por defecto */
    .unit-toggle-element {
        display: none !important; /* Inicialmente oculto con !important para evitar conflictos */
        margin-top: 3px;
        padding-top: 2px;
        border-top: 1px dotted rgba(0,0,0,0.1);
        transition: opacity 0.3s ease;
    }
    
    /* Cuando se muestra explÃ­citamente */
    .unit-toggle-element.show {
        display: block !important;
    }
    </style>
            }
        </div>
    </div>
</div>